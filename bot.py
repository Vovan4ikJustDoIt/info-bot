import json
import datetime
import webscraper

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

from dateutil.relativedelta import relativedelta

# –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Å–∞–π—Ç—É cyberion.ua —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ JSON-—Ñ–∞–π–ª–∏
print("Get news ...")
webscraper.news_create_json()

print("Get clubs ...")
webscraper.clubs_create_json()

print("Get tournaments ...")
webscraper.tournaments_create_json()

# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —ñ —á–∏—Ç–∞—î–º–æ JSON-—Ñ–∞–π–ª
with open("news.json", "r", encoding="utf-8") as f:
    dataNews = json.load(f)

with open("clubs.json", "r", encoding="utf-8") as f:
    dataClubs = json.load(f)

with open("tournaments.json", "r", encoding="utf-8") as f:
    dataTournaments = json.load(f)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "*********"

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
user_bot_messages = {}

dash = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
BUTTONS_PER_PAGE = 4
ALL_OPTIONS = [f" {club}" for club in dataClubs]

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
def build_inline_keyboard_clubs(page: int):
    start = page * BUTTONS_PER_PAGE
    end = start + BUTTONS_PER_PAGE
    buttons = [
        [InlineKeyboardButton(text=opt, callback_data=f"option:{opt}")]
        for opt in ALL_OPTIONS[start:end]
    ]

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if end < len(ALL_OPTIONS):
        nav.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page:{page + 1}"))

    if nav:
        buttons.append(nav)
    
    buttons.append([InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–∞", callback_data="home")])

    return InlineKeyboardMarkup(buttons)

def build_inline_keyboard_home():
    buttons = [
        [InlineKeyboardButton(text="–ù–æ–≤–∏–Ω–∏", callback_data="news")],
        [InlineKeyboardButton(text="–ö–ª—É–±–∏", callback_data="clubs")],
        [InlineKeyboardButton(text="–¢—É—Ä–Ω—ñ—Ä–∏", callback_data="tournaments")]
    ]
    return InlineKeyboardMarkup(buttons)

def build_inline_keyboard_news():
    buttons = [
        [InlineKeyboardButton(text="–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å", callback_data="now")],
        [InlineKeyboardButton(text="–ú–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å", callback_data="past")],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–∞", callback_data="home")]
    ]
    return InlineKeyboardMarkup(buttons)

def build_inline_keyboard_tournaments():
    buttons = [
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–∞", callback_data="home")]
    ]
    return InlineKeyboardMarkup(buttons)

# –í–∏–¥–∞–ª—è—î–º–æ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —ñ –±–æ—Ç–∞
async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∫–æ–º–∞–Ω–¥—É –∞–±–æ —Ç–µ–∫—Å—Ç)
    try:
        await context.bot.delete_message(chat_id, update.message.message_id)
    except:
        print("Error delete user msg")
        pass

    # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    old_msg_id = user_bot_messages.get(user_id)
    if old_msg_id:
        try:
            await context.bot.delete_message(chat_id, old_msg_id)
        except:
            print("Error delete bot msg")
            pass

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await clear_chat(update, context)
    print("Use bot /start")
    msg = await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç:",
        reply_markup=build_inline_keyboard_home()
    )

    user_bot_messages[update.effective_user.id] = msg.message_id

# –í–∏–≤—ñ–¥ –Ω–æ–≤–∏–≤–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
async def send_news(update: Update):
    newsNow = []

    today = datetime.date.today()
    format_today = f""
    text = f''

    if update.callback_query.data == "now":
        format_today = f"{today.month}.{today.year}"
        text = f'‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:\n{dash}\n'
    elif update.callback_query.data == "past":
        past_time = today - relativedelta(months=1)
        format_today = f"{past_time.month}.{past_time.year}"
        text = f'‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –ú–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å:\n{dash}\n'

    for news in dataNews:
        date_str = news["date"]
        date_obj = datetime.datetime.strptime(date_str, "%d.%m.%Y")

        fomat_date_news = f"{date_obj.month}.{date_obj.year}"

        if fomat_date_news == format_today:
            newsNow.append(news)    

    for news in newsNow:
        text += f'üî• <b>{news["title"]}</b>\nüìÖ <b>{news["date"]}</b>\n\nüì∞ –î–µ—Ç–∞–ª—ñ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n<a href="{news["url"]}">cyberion.ua/news</a>\n{dash}\n'

    try:  
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=build_inline_keyboard_news(),
            parse_mode="HTML",
            disable_web_page_preview=True
            )
    except:
        print("No edit text")

# –û–±—Ä–æ–±–∫–∞ callback_data
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –æ–±–æ–≤'—è–∑–∫–æ–≤–æ

    data = query.data

    if data.startswith("page:"):
        page = int(data.split(":")[1])
        await query.edit_message_reply_markup(reply_markup=build_inline_keyboard_clubs(page))

    elif data.startswith("news"):
        await query.edit_message_text(
            text="–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:",
            reply_markup=build_inline_keyboard_news()
            )
    
    elif data.startswith("now"):
        await send_news(update)

    elif data.startswith("past"):
        await send_news(update)
    
    elif data.startswith("clubs"):
        await query.edit_message_text(
            text="–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
            reply_markup=build_inline_keyboard_clubs(page=0)
            )
    
    elif data.startswith("tournaments"):
        text = f'üïπÔ∏è –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤:\n{dash}\n'
        for tournament in dataTournaments:
            text += f'üéÆ <b>{tournament["title"]}</b>\n\n{tournament["parameters"]}\n\nüìù <a href="https://cyberion.ua/kololeague">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å</a>\n{dash}\n'

        try:
            await query.edit_message_text(
                text=text,
                reply_markup=build_inline_keyboard_tournaments(),
                parse_mode="HTML"
                )
        except:
            print("No edit text")
        
    elif data.startswith("home"):
        await query.edit_message_text(
            text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_inline_keyboard_home()
            )

    elif data.startswith("option:"):
        option = data.split(":", 1)[1]
        text = f'‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {option} \n{dash}\n'
        cut = option[1:len(option)]
        dataClubsCity = dataClubs[cut]

        if dataClubsCity[0]["url_club"] != "":
            
            for club in dataClubsCity:
                if club["title"][:8] == "CYBERION":
                    title = club["title"][9:]
                else:
                    title = club["title"]
                text += f'üìç <b>{title}</b>\n<a href="https://www.google.com/maps/search/?api=1&query={club["location"]}"><i>{club["location"][len(cut)+1:]}</i></a>\nüéÆ <a href="{club["url_club"]}">–°–∞–π—Ç –∫–ª—É–±—É</a> üåê\nüóìÔ∏è <a href="{club["social"]}">–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è</a>\n{dash}\n'
              
            try:
                await query.edit_message_text(
                    text=text,
                    reply_markup=build_inline_keyboard_clubs(page=0),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                    )
            except:
                print("No edit text")

        else:
            
            try:
                await query.edit_message_text(
                    text=f'‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {option}\n\nüöÄ <b>–ù–ï–ó–ê–ë–ê–†–û–ú –í–Ü–î–ö–†–ò–¢–¢–Ø!</b>  ',
                    reply_markup=build_inline_keyboard_clubs(page=0),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                    )
            except:
                print("No edit text")
    
# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
    app.run_polling()

if __name__ == '__main__':
    main()
    